import numpy as np
import cv2
import PIL.Image as Im
import PIL
from PIL import EpsImagePlugin
EpsImagePlugin.gs_windows_binary =r'C:\Program Files\LyX 2.3\ghostscript\bin\gswin64.exe' 

N=5
F=2
gamma=0.98
g=1./gamma
nz=0.
uhas=1.
Na=10
Nm=9
nb=1
nconf=2**nb
conf=0
cc=0

steps=450

uload=0
usafe=1
uvideo=1
nk=11
ncop=1

food=np.zeros((N,N),int)
food+=1

form0=np.zeros((2,N,N),int)
form=np.zeros((2,N,N),int)
form0+=1

bordform=np.zeros((nb,N,N),int)
bordform[0,N//2,:]+=1

for b in range(nb):
	form0[1]+=-bordform[b]

bords=np.zeros((2,N,N),int)
for i in range(nb):
	bords[1]+=bordform[i]

ifonbord=np.zeros((nb,N,N),int)
ifonbord[0,0,0]=1

ifonbords=np.zeros((2,N,N),int)
for i in range(nb):
	ifonbords[1]+=ifonbord[i]

def stopos(s):
    f=s//N**4
    s=s%N**4
    s1=s//(N**2)
    s2=s%(N**2)
    a=np.zeros(5, int)
    a[0]=f
    a[1]=s1//N
    a[2]=s1%N
    a[3]=s2//N
    a[4]=s2%N
    return a

def postos(a):
    s=(N*a[1]+a[2])*N**2+(N*a[3]+a[4])+a[0]*N**4
    return s

def ifa(s,a,ind):
	pos=stopos(s)
	w=0
	if a<Nm:
		pos[ind]+=a//3-1
		pos[ind+1]+=a%3-1
		w=0
		if (pos[ind]<N) and (pos[ind]>=0) and (pos[ind+1]<N) and (pos[ind+1]>=0):
			if (form[(ind-1)//2,pos[ind],pos[ind+1]]==1): 
				w=1
	if a>=Nm:
		w=0
		if (ifonbords[1,pos[1],pos[2]]==1):# and (pos[3]>N//2):
			w=1
	return w

def nexts(s,a):
    pos=stopos(s)
    pos0=np.zeros((5), int)
    for i in range(5):
        pos0[i]=pos[i]
    lists=[]
    listp=[]
    if (pos[0]==-1):
        pos[0]=-1
    else:
        pos[0]=pos[0]-1+food[pos[1],pos[2]]
        if (pos[0]>=F):
            pos[0]=F-1
        if (pos[0]>=0):
            if (a<Nm):
                pos[1]=(pos[1]+a//3-1)#%N
                pos[2]=(pos[2]+a%3-1)#%N
                if pos[1]<0:
                    pos[1]=0
                if pos[1]>N-1:
                    pos[1]=N-1
                if pos[2]<0:
                    pos[2]=0
                if pos[2]>N-1:
                    pos[2]=N-1
    pos1=np.zeros((5), int)
    for i in range(5):
        pos1[i]=pos[i]
    nst2=sum(w2[cc,pos0[3]*N+pos0[4]])
    for a2 in range(9):
        if (ifa(s,a2,3)==1):
           pos1[3]=(pos[3]+a2//3-1)#%N
           pos1[4]=(pos[4]+a2%3-1)#%N
           lists.append(postos(pos1))
           listp.append(1./nst2)#(wp[pos0[1]*N+pos0[2],pos0[3]*N+pos0[4],pos1[3]*N+pos1[4] ])
    return lists,listp

def W01(pos,pos1):
    w=0
    if (pos[0]==0) and (pos!=pos1):
        w=0
    else:
        if (pos[0]-1+food[pos[1],pos[2]]==pos1[0]) and (abs(pos[1]-pos1[1])<=1) and (abs(pos[2]-pos1[2])<=1):
            w=1
    return w

def W2(pos,pos1):
    w=0
    if (abs(pos[1]-pos1[1])<2) and (abs(pos[2]-pos1[2])<2):
            w=1
    return w

def Wnum(pos,pos1):
    w=0
    if (abs(pos//N-pos1//N)<2) and (abs(pos%N-pos1%N)<2) and (form[0,pos1//N,pos1%N]==1) and (form[0,pos//N,pos%N]==1):
            w=1
    return w

def Wnum2(pos,pos1):
    w=0
    if (abs(pos//N-pos1//N)<2) and (abs(pos%N-pos1%N)<2) and (form[1,pos1//N,pos1%N]==1): # and (form[1,pos//N,pos%N]==1):
            w=1
    return w

beta=2.
miop=0
def Wp(pos1,pos2):
	wp=np.zeros((3,3))
	l=np.sqrt((pos1//N-pos2//N)**2+(pos1%N-pos2%N)**2)
	if (l>0):
		for i in range(3):
			for j in range(3):
				wp[i,j]=(i-1)*(pos1//N-pos2//N)+(j-1)*(pos1%N-pos2%N)
				if (abs(i-1)==1) and (abs(j-1)==1):
					wp[i,j]*=1./np.sqrt(2)
		wp*=1./l
		if (miop==1):
			if (l>1):
				wp*=1./l
	wpmax=np.amax(wp)
	wp-=wpmax
	wpsum=0
	for i in range(3):
		for j in range(3):
			wp[i,j]=np.exp(beta*wp[i,j])
			wpsum+=wp[i,j]
	wp*=1./wpsum
	print("wp_exp",wp)
	return wp
        
zpos=np.ones((F,nconf,N*N,N*N))*1.
zpos1=np.ones((F,nconf,N*N,N*N))*1.
zposfin=np.ones((F,nconf,N*N,N*N))*1.
lnz=np.zeros((nconf,N*N,N*N))*1.
zac=np.zeros((nconf,N*N,N*N))*1.
w1=np.zeros((nconf,N**2,N**2))
w2=np.zeros((nconf,N**2,N**2))
#w=np.zeros((N**4,N**4))
wp0=np.zeros((nconf,N**2,N**2))
for c in range(nconf):
            form[0]=form0[0]
            form[1]=form0[1]
            for b in range(nb):
                            ub= (c%(2**(b+1)) )//(2**b)
                            form[1]+=bordform[b]*ub
            for i in range(N**2):
                for j in range(N**2):
                    w1[c,i,j]=Wnum(i,j)
                    w2[c,i,j]=Wnum2(i,j)
            for j in range(N**2):
                k=0
                for i1 in range(3):
                    for j1 in range(3):
                        if (j//N+i1-1>=0) and (j//N+i1-1<N) and (j%N+j1-1>=0) and (j%N+j1-1<N):
                            if (w2[c,j,(j//N+i1-1)*N+j%N+j1-1]==1):
                                wp0[c,j,(j//N+i1-1)*N+j%N+j1-1]=1.
                                k+=1
                wp0[c,j]*=1./k


form[0]=form0[0]
form[1]=form0[1]

print("wp0",wp0)


hwp=np.zeros((nconf,N**2))

for c in range(nconf):
	for j in range(N**2):
		invp2=sum(w2[c,j])
		if invp2>0:
			hwp[c,j]=np.log(sum(w2[c,j])) #wp
print("hwp",hwp)

ifcat=np.zeros((N*N),int)
for j in range(N*N):
	if j//N>N//2:
		ifcat[j]=1

wck=np.zeros((nk*ncop), int)
bok=np.zeros((nk*ncop), int)
cck=np.zeros((nk*ncop,nconf), int)
tc=[]
print("form01",form0[1])
for hask in range(nk*ncop):
    cc=0
    form[1]=form0[1]
    form[0]=form0[0]
    #cc=1
    #form[1]=1
    tcnow=[]
    uhas=(hask//ncop)*1./(nk-1)
    pref0="keycorner_zformedW_friendly2 "   
    postf="gamma"+str(gamma)+"N"+str(N)+"F"+str(F)+"beta"+str(beta)+"miop"+str(miop)+"nz"+str(nz)+"has"+str(uhas)+"nconf"+str(nconf)
    pref=pref0+postf
    T=2000
    if (uload==0):
        for t in range(T):
            for f in range(F):
                for c in range(nconf):
                    for i in range(N**2):
                        for j in range(N**2):
                            if (zpos[f,c,i,j]>0):
                                lnz[c,i,j]=np.log(zpos[f,c,i,j])
                            else:
                                lnz[c,i,j]=-100.
                for i in range(N**2):
                    for c in range(nconf):
                        zac[c]=np.dot(lnz[c],wp0[c].transpose()) #wp
                    for c in range(nconf):
                        za=zac[c]
                        if form[0,i//N,i%N]==1:
                            znz=np.dot(w1[c,i],za)/sum(w1[c,i])
                            za=(1-nz)*za+nz*znz
                            na=sum(w1[c,i])
                            if (nz>0):
                                    za+=(-(1-nz+nz/na)*np.log(1-nz+nz/na)-(na-1)*nz/na*np.log(nz/na))*uhas
                            for k in range(N**2):
                                    za[k]+=uhas*hwp[c]#[i]
                        za=np.exp(za)
                        zpos1[f,c,i]=np.dot(w1[c,i],za)
                        if (ifonbords[1,i//N,i%N]==1):#  and (pos[3]>N//2):
                            c2=c
                            for b in range(nb):
                                if (ifonbord[b,i//N,i%N]==1):
                                    uc2= (c%(2**(b+1)) )//(2**b)
                                    c2+=(1-2*uc2)*2**b
                            zpos1[f,c,i]+=np.exp(zac[c2,i]+uhas*hwp[c])#*ifcat
        
            for i in range(N**2):
                for f in range(F):
                    f0=f+1-food[i//N,i%N]
                    if (f0>=0) and (f0<F):
                        zpos[f0,:,i]=zpos1[f,:,i]
                for df in range(food[i//N,i%N]-1):
                    zpos[F-1-df,:,i]=zpos1[F-food[i//N,i%N],:,i]
            zpos=zpos**gamma
            print("zpos",zpos)
            if t==T-2:
                for f in range(F):
                    zposfin[f]=zpos[f]
        print("zposfin")
        for f in range(F):
            print("f ",f)
            for c in range(nconf):
                for i in range(N**2):
                    print(c,i,zposfin[f,c,i])
        print("zposfin-zpos")
        for f in range(F):
            print("f ",f)
            for c in range(nconf):
                for i in range(N**2):
                    print(c,i,zposfin[f,c,i]-zpos[f,c,i])
        if (usafe==1):
            file = open(pref, "wb")
            np.save(file, zposfin)
            file.close
    else:
        file = open(pref, "rb")
        zposfin = np.load(file)
        print("zposfin",zposfin)

    for i in range(N*N):
        print(i,w2[0,i])
    for i in range(N*N):
        print(i,w2[1,i])

    pref="vid_"+pref0+"shortcc1 nk"+str(nk)+postf
        
    spos=np.array([F-1,N//2,1,N-1,N-1])
    u=0
    for k in range(0): #10
	    spos[1]=int(N*np.random.rand())
	    spos[2]=int(N*np.random.rand())
	    spos[3]=int(N*np.random.rand())
	    spos[4]=int(N*np.random.rand())
	    if (form[0,spos[1],spos[2]]==1) and (form[1,spos[3],spos[4]]==1):
		    u=1
		    break
    if u==0:
	    spos=np.array([F-1,N//2,1,N-1,N-1])
    s=postos(spos)

    pa=np.zeros(Na)*1.
    print("spos",spos,"F",F)
    print("s",stopos(s))

    import turtle
    turtle.ht()
    scr = turtle.getscreen()
    t0 = turtle.Turtle()
    t0.speed(0) #10
    dx=80
    t0.penup()
    t0.ht()

    screen = turtle.Screen()
    screen.register_shape("cat_free.gif")#"cat2.gif")
    screen.register_shape("mouse_free.gif")#"mouse_active3.gif")
    screen.register_shape("mouse_dead_free.gif")#"mouse_quiet3.gif")
    screen.register_shape("cheese.gif")
    screen.register_shape("cheese-white.gif")
    x0=-500
    y0=-300
    mrg=0.#int(dx/4.)
    marg=dx//4

    t0.pencolor("black")
    t0.penup()
    fdlst=[]
    fdn=0

    t2 = turtle.Turtle()
    t2.penup()
    t2.speed(10)
    t1 = turtle.Turtle()
    t1.speed(0) #10
    t1.penup()
    t1.shape("mouse_free.gif")#"mouse_active3.gif")
    t2.shape("cat_free.gif")#"cat2.gif")
    tz = turtle.Turtle()
    tz.penup()
    tz.speed(10)
    yz0=y0
    xz0=x0+N*dx+50
    dxz=3
    dyz=3

    tz.goto(xz0,yz0)
    tz.pendown()
    tz.goto(xz0,yz0+500)
    tz.seth(90)
    tz.stamp()
    tz.write('v',font=('Arial',20,'normal') )
    tz.penup()
    tz.goto(xz0,yz0)
    tz.pendown()
    tz.goto(xz0+500,yz0)
    tz.seth(0)
    tz.stamp()
    tz.write('t',font=('Arial',20,'normal') )
    tz.penup()
    tz.ht()
    tz.goto(xz0,yz0+int( np.log( zposfin[s//N**4,cc,(s%N**4)//N**2,s%N**2] )*dyz))
    tz.pendown()

    tf = turtle.Turtle()
    tf.penup()
    tf.speed(10)
    yf0=y0
    xf0=x0-80
    dxf=1
    dyf=10
    tf.shape('cheese-white.gif')
    tf.goto(xf0,yf0)
    tf.pencolor('green')
    tf.width(20)
    tf.pendown()
    tf.goto(xf0,yf0+int( s//N**4 *dyf))

    t1.penup()    
    t1.goto(x0+spos[1]*dx+dx//2,y0+spos[2]*dx+dx//2)
    t2.goto(x0+spos[3]*dx+dx//2,y0+spos[4]*dx+dx//2)
    glide=5
    t1.speed(glide)
    t2.speed(glide)

    def paintborders():
        t0.width(1)
        t0.pencolor("black")
        for i in range(N):
	        for j in range(N):
		        if form[0,i,j]==1:
			        t0.penup()
			        if (i==0) or (form[0,i-1,j]==0):
				        t0.penup()
				        t0.goto(x0-mrg+i*dx,y0+j*dx)
				        t0.pendown()
				        t0.goto(x0-mrg+i*dx,y0+(j+1)*dx)
			        if (j==0) or (form[0,i,j-1]==0):
				        t0.penup()
				        t0.goto(x0+i*dx,y0-mrg+j*dx)
				        t0.pendown()
				        t0.goto(x0+(i+1)*dx,y0-mrg+j*dx)
			        if (i==N-1) or (form[0,i+1,j]==0):
				        t0.penup()
				        t0.goto(x0+mrg+(i+1)*dx,y0+j*dx)
				        t0.pendown()
				        t0.goto(x0+mrg+(i+1)*dx,y0+(j+1)*dx)
			        if (j==N-1) or (form[0,i,j+1]==0):
				        t0.penup()
				        t0.goto(x0+i*dx,y0+mrg+(j+1)*dx)
				        t0.pendown()
				        t0.goto(x0+(i+1)*dx,y0+mrg+(j+1)*dx)
        t0.penup()

    print("N",N)
    paintborders()

    for b in range(nb):
                    uc2= (cc%(2**(b+1)) )//(2**b)
                    if (uc2==1):
                        t0.pencolor("white")
                    else:
                        t0.pencolor("grey")
                    for i in range(N):
                        for j in range(N):
                            if (bordform[b,i,j]==1):
                                t0.goto(x0+i*dx+5,y0+j*dx+5)
                                t0.pendown()
                                t0.goto(x0+i*dx+dx-5,y0+j*dx+dx-5)
                                t0.penup()
                                t0.goto(x0+i*dx+5,y0+j*dx+dx-5)
                                t0.pendown()
                                t0.goto(x0+i*dx+dx-5,y0+j*dx+5)
                                t0.penup()
                               
    tail='png'
    t0.getscreen().getcanvas().postscript(file='temp.eps')
    im=Im.open("temp.eps") 
    imcon=im.convert("RGB")
    imcon.save("temp."+tail)
    img = cv2.imread('temp.'+tail)
    height, width, layers = img.shape
    framesize = (width,height)
    if (uvideo==1):
	    outfile='output_video_plots_'+pref+'.avi'
	    out = cv2.VideoWriter(outfile,cv2.VideoWriter_fourcc(*'DIVX'), 2*glide, framesize) #cv2.VideoWriter_fourcc(*'MP42') 'DIVX'
	    out.write(img)
    else:
	    glide=0
    bardo=5
    trebirth=steps+1
    tlifes=[]
    occ=np.zeros((N,N),int)
    vocc=np.zeros((N,N,Na),int)
    focc=np.zeros((N,N),int)
    ccount=np.zeros((nconf),int)
    v_prod_av=np.zeros((5))
    vr_prod_av=np.zeros((N**2+1))
    maxwell_d=1
    xwall=2
    xhalf=0
    if (spos[1]>xwall):
	    xhalf=1
    if (spos[1]<xwall):
	    xhalf=-1
    rotcl=0
    rotacl=0
    ycross=0
    ycross0=0
    ncross=0
    wallcount=0
    sumb2=0
    b2=0
    for t in range(steps):
        pa=np.zeros(Na)*1.
        for a in range(Na):
                if ifa(s,a,1)==1:
                   z2=1.
                   ls,ps=nexts(s,a)
                   c2=cc
                   if (a==Nm):
                       for b in range(nb):
                           if (ifonbord[b,i//N,i%N]==1): 
                               uc2= (cc%(2**(b+1)) )//(2**b)
                               c2=c2+(1-2*uc2)*2**b
                   print("s,a,ls,ps",stopos(s),a,ls,ps)
                   for i in range(len(ls)):
                        s2=ls[i]
                        p2=ps[i]
                        print("s2,z", stopos(s2),zposfin[s2//N**4,c2,(s2%N**4)//N**2,s2%N**2])
                        z2*=zposfin[s2//N**4,c2,(s2%N**4)//N**2,s2%N**2]**p2	
                   pa[a]=z2#  /zpos[s//N**4,(s%N**4)//N**2,s%N**2]**g
        zsum=sum(pa)
        if zsum>0:
            pa*=1./zsum
        print("pa",pa)
        rnz=np.random.rand()
        if rnz>=nz:
            r=np.random.rand()
            for a in range(Na):
                r=r-pa[a]
                if r<0:
                    print("a ",a)
                    break
        else:
            ra=int(rnz/nz*sum(w1[cc, spos[1]*N+spos[2] ]))
            for a in range(Na):
                if ifa(s,a,1)==1:
                    ra=ra-1
                if ra<0:
                    print("a ",a)
                    break

        r2=np.random.rand()
        ls,ps=nexts(s,a)
        spos0=stopos(s)
        for a2 in range(len(ls)):
               r2-=ps[a2]
               if r2<0:
                   s=ls[a2]
                   break
        print("s",stopos(s))
        spos=stopos(s)
        x2h=spos0[3]+1
        if x2h>N-1:
            x2h=N-1
        x2l=spos0[3]-1
        if x2l<0:
            x2l=0
        y2h=spos0[4]+1
        if y2h>N-1:
            y2h=N-1
        y2l=spos0[4]-1
        if y2l<0:
            y2l=0
        b2=sum(bords[1,x2l:x2h+1,y2l:y2h+1].flatten())-sum(form[1,x2l:x2h+1,y2l:y2h+1].flatten())+sum(form0[1,x2l:x2h+1,y2l:y2h+1].flatten())
        print("b2",b2)
        sumb2+=b2
        print("w2_prev",w2[cc,spos0[3]*N+spos0[4],spos[3]*N+spos[4]],w2[cc,spos0[3]*N+spos0[4]])

        if (a==Nm):
            print("!!!")
            tcnow.append(t)
            wallcount+=1
            for b in range(nb):
                if (ifonbord[b,spos0[1],spos0[2]]==1): 
                    uc2= (cc%(2**(b+1)) )//(2**b)
                    cc=cc+(1-2*uc2)*2**b
                    form[1]+=bordform[b]*(1-2*uc2)
                    if (uc2==0):
                        t0.pencolor("white")
                    else:
                        t0.pencolor("grey")
                    for i in range(N):
                        for j in range(N):
                            if (bordform[b,i,j]==1):
                                t0.goto(x0+i*dx+5,y0+j*dx+5)
                                t0.pendown()
                                t0.goto(x0+i*dx+dx-5,y0+j*dx+dx-5)
                                t0.penup()
                                t0.goto(x0+i*dx+5,y0+j*dx+dx-5)
                                t0.pendown()
                                t0.goto(x0+i*dx+dx-5,y0+j*dx+5)
                                t0.penup()
                               

        if (spos[0]>spos0[0]) or (t==trebirth):
            tf.pencolor('green')
        else:
            tf.pencolor('white')
        tf.goto(xf0,yf0+int(s//N**4 *dyf) )
        for stp in range(glide):
            st=stp+1
            t1.goto(x0+spos0[1]*dx+int((spos[1]-spos0[1])*dx*st/glide*1.)+dx//2,y0+spos0[2]*dx+int((spos[2]-spos0[2])*dx*st/glide*1.)+dx//2)        
            t2.goto(x0+spos0[3]*dx+int((spos[3]-spos0[3])*dx*st/glide*1.)+dx//2,y0+spos0[4]*dx+int((spos[4]-spos0[4])*dx*st/glide*1.)+dx//2)       
            if (st==glide) and (spos[0]==-1):
                t1.shape("mouse_dead_free.gif")#"mouse_quiet3.gif")
                if (spos0[0]>-1):
                    if (trebirth<steps):
                        tlife=t-trebirth
                    else:
                        tlife=t
                    tlifes.append(tlife)
                    trebirth=t+bardo
                if (t==trebirth):
                    u=0
                    spos[0]=F-1
                    if u==0:
                    	spos[2]=1
                    	spos[1]=N//2
                    s=postos(spos)
                    t1.goto(x0+spos[1]*dx+dx//2,y0+spos[2]*dx+dx//2)
                    t1.shape("mouse_free.gif")#"mouse_active3.gif")
                    xhalf=0
                    if (spos[1]>xwall):
	                    xhalf=1
                    if (spos[1]<xwall):
	                    xhalf=-1
                    tf.pencolor('white')
                    tf.goto(xf0,yf0)
                    tf.pencolor('green')
                    tf.goto(xf0,yf0+int(s//N**4 *dyf) )

            t0.getscreen().getcanvas().postscript(file="temp.eps")
            im=Im.open("temp.eps")
            imcon=im.convert("RGB")
            imcon.save("temp."+tail)
            img = cv2.imread('temp.'+tail)
            out.write(img)
        if (glide==0):
            if (spos[0]==-1):
                t1.shape("mouse_dead_free.gif")#"mouse_quiet3.gif")
                if (spos0[0]>-1):
                    if (trebirth<steps):
                        tlife=t-trebirth
                    else:
                        tlife=t
                    tlifes.append(tlife)
                    trebirth=t+bardo
                if (t==trebirth):
                    u=0
                    spos[0]=F-1
                    if u==0:
                    	spos[2]=1
                    	spos[1]=N//2
                    s=postos(spos)
                    t1.goto(x0+spos[1]*dx+dx//2,y0+spos[2]*dx+dx//2)
                    t1.shape("mouse_free.gif")#"mouse_active3.gif")
                    xhalf=0
                    if (spos[1]>xwall):
	                    xhalf=1
                    if (spos[1]<xwall):
	                    xhalf=-1
                    tf.pencolor('white')
                    tf.goto(xf0,yf0)
                    tf.pencolor('green')
                    tf.goto(xf0,yf0+int(s//N**4 *dyf) )
        if (spos0[0]>-1):
                vocc[spos0[1],spos0[2],(spos[1]-spos0[1]+1)*3+(spos[2]-spos0[2]+1)]+=1
                v_prod=(spos[1]-spos0[1])*(spos[3]-spos0[3])+(spos[2]-spos0[2])*(spos[4]-spos0[4])
                if (v_prod!=0):
                    v_prod*=1./np.sqrt((spos[1]-spos0[1])**2+(spos[2]-spos0[2])**2)/np.sqrt((spos[3]-spos0[3])**2+(spos[4]-spos0[4])**2)
                v_prod_av[int(2*v_prod)+2]+=1
                vr_prod=(spos[1]-spos0[1])*(spos0[3]-spos0[1])+(spos[2]-spos0[2])*(spos0[4]-spos0[2])
                if (vr_prod!=0):
                    vr_prod*=1./np.sqrt((spos[1]-spos0[1])**2+(spos[2]-spos0[2])**2)/np.sqrt((spos0[3]-spos0[1])**2+(spos0[4]-spos0[2])**2)
                vr_prod_av[int(np.arccos(vr_prod)/np.pi*N**2 ) ]+=1
        focc[spos[3],spos[4]]+=1
        ccount[cc]+=1
        if not ( (spos[0]==-1)): # and (spos0[0]==-1) ):
            occ[spos[1],spos[2]]+=1
            tz.goto(xz0+(t+1)*dxz,yz0+np.log( zposfin[s//N**4,cc,(s%N**4)//N**2,s%N**2] )*dyz)
            print("v",np.log( zposfin[s//N**4,cc,(s%N**4)//N**2,s%N**2] ))
            if (maxwell_d==1):
                if (spos0[1]==xwall):
                    if ( (spos[1]-xwall)*xhalf==-1):
                        xhalf=spos[1]-xwall
                        ycross0=ycross
                        ycross=spos0[2]
                        ncross+=1
                        if (ycross-ycross0)*xhalf>0:
                            rotcl+=1
                        if (ycross-ycross0)*xhalf<0:
                            rotacl+=1
                    if (xhalf==0):
                        xhalf=spos[1]-xwall
                        
        else:
            tz.goto(xz0+(t+1)*dxz,yz0)
    print("occ",occ)
    print("tlifes",tlifes)
    if (len(tlifes)>0):
	    print("t_av",sum(tlifes) / len(tlifes))
    print("v_prod",v_prod_av)
    v_prod_av*=1./sum(v_prod_av)
    print("v_prod_av",v_prod_av)
    print("vr_prod",vr_prod_av)
    print("wallcount",wallcount)
    print("sumb2",sumb2)
    if (maxwell_d):
	    print("rotcl,rotacl,ncross",rotcl,rotacl,ncross)
    if (uvideo==1):
	    out.release()

    if (hask%ncop==ncop-1):
        file = open("wc_intermed_nk"+str(hask//ncop)+"x"+str(ncop)+"_"+pref, "wb")
        np.save(file, wck)
        file.close
        file = open("bo_intermed_nk"+str(hask//ncop)+"x"+str(ncop)+"_"+pref, "wb")
        np.save(file, bok)
        file.close
        file = open("cc_intermed_nk"+str(hask//ncop)+"x"+str(ncop)+"_"+pref, "wb")
        np.save(file, cck)
        file.close



    t1.ht()
    t2.ht()
    tz.clear()
    tf.clear()
    tf.ht()
    for i in range(len(fdlst)):
	    fdlst[i].ht()
    t0.clear()
    dx_vocc=dx//2
    marg=0
    t0.width(1)
    t0.pencolor("green")
    maxocc=np.amax(occ)
    dx_vocc=dx//2
    for i in range(N):
            for j in range(N):
                    if occ[i,j]>0:
                            vxsum=0.
                            vysum=0.
                            t0.penup()
                            t0.pencolor("green")
                            t0.goto(x0+i*dx+dx//2,y0+j*dx+dx//2)
                            t0.pendown()
                            t0.dot(int(occ[i,j]/maxocc*dx))
                            t0.pencolor("black")
                            for a in range(Na):
                                va=vocc[i,j,a]*1./(sum(vocc[i,j,:]))
                                vxsum+=va*(a//3-1)
                                vysum+=va*(a%3-1)
                                if (vocc[i,j,a]>0):
                                    t0.penup()
                                    t0.goto(x0+i*dx+dx//2,y0+j*dx+dx//2)
                                    t0.pendown()
                                    if (a==4):
                                        t0.width(2)
                                        t0.goto(x0+i*dx+dx//2,y0+j*dx+dx//2-int(va*dx_vocc/2))
                                        t0.circle(int(va*dx_vocc/2))
                                        t0.width(5)
                                    else:
                                        t0.goto(x0+i*dx+dx//2+(a//3-1)*int(va*dx_vocc),y0+j*dx+dx//2+(a%3-1)*int(va*dx_vocc))
    t0.penup()
    paintborders()
    t0.getscreen().getcanvas().postscript(file="occ_vocc_"+str(hask)+"/"+str(nk)+"_"+pref+"_steps"+str(steps)+".eps")

    print("START FOCC")
    t0.clear()
    maxfocc=np.amax(focc)
    for i in range(N):
            for j in range(N):
                    if focc[i,j]>0:
                            t0.color(( 1.,1.,1.-focc[i,j]/maxfocc ),( 1.,1.,1.-focc[i,j]/maxfocc ))
                    else:
                            t0.color("white","white")
                    t0.penup()
                    t0.goto(x0+i*dx+marg,y0+j*dx+marg)
                    t0.pendown()
                    t0.width(1)
                    t0.begin_fill()
                    t0.goto(x0+i*dx+marg,y0+(j+1)*dx-marg)
                    t0.goto(x0+(i+1)*dx-marg,y0+(j+1)*dx-marg)
                    t0.goto(x0+(i+1)*dx-marg,y0+j*dx+marg)
                    t0.goto(x0+i*dx+marg,y0+j*dx+marg)
                    t0.end_fill()
    t0.penup()
    paintborders()
    t0.getscreen().getcanvas().postscript(file="focc_"+str(hask)+"/"+str(nk)+"_"+pref+"_steps"+str(steps)+".eps")

    maxfocc=np.amax(focc)
    print("STOP FOCC")
    wck[hask]=wallcount
    bok[hask]=sumb2
    cck[hask]=ccount
    tc.append(tcnow)


    file = open("focc_"+str(hask)+"_"+pref+"_steps"+str(steps), "wb") #+str(hask)+"/"+str(nk)+"_"
    np.save(file, focc)#/maxfocc)
    file.close

    t0.clear()
    tz.clear()
    tf.clear()

file = open("focc_"+pref+"_steps"+str(steps), "wb") #+str(hask)+"/"+str(nk)+"_"
np.save(file, focc)#/maxfocc)
file.close
t0.getscreen().getcanvas().postscript(file="tem.eps")
t0.clear()
print("wck,bok,cck",wck,bok,cck)
file = open("wc0_"+str(nk)+"x"+str(ncop)+"_"+pref, "wb")
np.save(file, wck)
file.close
file = open("bo0_"+str(nk)+"x"+str(ncop)+"_"+pref, "wb")
np.save(file, bok)
file.close
file = open("cc0_"+str(nk)+"x"+str(ncop)+"_"+pref, "wb")
np.save(file, cck)
file.close
file = open("tc0_"+str(nk)+"x"+str(ncop)+"_"+pref, "wb")
np.save(file, tc)
file.close